@page "/basket"
@attribute [Authorize]
@inject IBasketService BasketService
@inject NavigationManager Navigation

<div class="esh-basket">
    <Header Url="/catalog">
        <Content>Back to catalog</Content>
    </Header>

    <div class="container">
        <div class="alert alert-warning" hidden="@(!errorUpdate)" role="alert">
            Error updating basket items, please try later on        
        </div>

        <article class="esh-basket-titles row">
            <section class="esh-basket-title col-3">Product</section>
            <section class="esh-basket-title col-3 hidden-lg-down"></section>
            <section class="esh-basket-title col-2">Price</section>
            <section class="esh-basket-title col-2">Quantity</section>
            <section class="esh-basket-title col-2">Cost</section>
        </article>

        @foreach (var item in basket.Items)
        {
            <article class="esh-basket-items row">
                <section class="esh-basket-item esh-basket-item--middle col-lg-3 hidden-lg-down">
                    <img class="esh-basket-image" src="@item.PictureUrl" />
                </section>
                <section class="esh-basket-item esh-basket-item--middle col-3">@item.ProductName</section>
                <section class="esh-basket-item esh-basket-item--middle col-2">$ @item.UnitPrice.ToString("N2")</section>
                <section class="esh-basket-item esh-basket-item--middle col-2">
                    <input id="quantity"
                           class="esh-basket-input @(item.Quantity < 1 ? "border border-danger" : "")"
                           type="number"
                           min="1"
                           value="@item.Quantity"
                           @onchange="e => ItemQuantityChanged(item, e)" /> @*@bind="item.Quantity"*@
                </section>
                <section class="esh-basket-item esh-basket-item--middle esh-basket-item--mark col-2">$ @((item.UnitPrice * item.Quantity).ToString("N2"))</section>
            </article>
            @*@if (item.Quantity < 1)
            {
                <span class="alert alert-danger">Quantity must be 1 or greater</span>
            }*@
            <div class="esh-basket-items--border row">
                @if (item.OldUnitPrice > 0)
                {
                    <div class="alert alert-warning" role="alert">&nbsp;Note that the price of this article changed in our Catalog. The old price when you originally added it to the basket was $ @item.OldUnitPrice </div>
                }
            </div>
            <br />
        }

        <div class="container">
            <article class="esh-basket-titles esh-basket-titles--clean row">
                <section class="esh-basket-title col-10"></section>
                <section class="esh-basket-title col-2">Total</section>
            </article>

            <article class="esh-basket-items row">
                <section class="esh-basket-item col-10"></section>
                <section class="esh-basket-item esh-basket-item--mark col-2">$ @basket.Total()</section>
            </article>

            <article class="esh-basket-items row">
                <section class="esh-basket-item col-7"></section>
                <section class="esh-basket-item col-2">
                    <button class="btn esh-basket-checkout" @onclick="Update">[ Update ]</button>
                </section>
                <section class="esh-basket-item col-3">
                    <div @onclick="CheckOut" class="btn esh-basket-checkout">[ Checkout ]</div>
                </section>
            </article>
        </div>
    </div>
</div>

@code {
    private bool errorUpdate;
    private BasketDTO basket = new BasketDTO();
    private string userId;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool HasItemWithInvalidQuantity
    {
        get => basket.Items.Any(x => x.Quantity < 1);
    }

    protected override async Task OnInitializedAsync()
    {
        userId = (await authenticationStateTask).User.GetSub();
        basket = await BasketService.GetBasket(userId);
    }

    private void ItemQuantityChanged(BasketItemDTO item, ChangeEventArgs e)
    {
        item.Quantity = Convert.ToInt32(e.Value);
        //if (item.Quantity < 1)
        //    return;
        //await BasketService.SetQuantities(userId, basket.Items.ToDictionary(x => x.Id, y => y.Quantity));
    }

    private async Task Update()
    {
        try
        {
            if (HasItemWithInvalidQuantity)
                return;
            await BasketService.UpdateBasket(basket);
            errorUpdate = false;
        }
        catch (Exception)
        {
            errorUpdate = true;
        }
    }

    private async Task CheckOut()
    {
        if (HasItemWithInvalidQuantity)
            return;
        await Update();
        Navigation.NavigateTo("/order");
    }
}
